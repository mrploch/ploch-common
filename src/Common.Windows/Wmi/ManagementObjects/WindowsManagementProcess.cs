using Ploch.Common.Windows.Wmi.ManagementObjects.TypeConversion;

namespace Ploch.Common.Windows.Wmi.ManagementObjects;

/// <summary>
///     Represents a WMI (Windows Management Instrumentation) class for managing and retrieving process-related information on a Windows
///     operating system.
/// </summary>
/// <remarks>
///     This class is mapped to the WMI class "Win32_Process" and provides access to process metadata and attributes such as process ID, name,
///     execution state, memory usage, and other process-related details.
///     It is designed to facilitate querying and managing Windows processes programmatically via WMI.
/// </remarks>
[WindowsManagementClass(ClassName)]
public class WindowsManagementProcess : CimProcess
{
    public const string ClassName = "Win32_Process";

    /// <summary>
    ///     Command line used to start a specific process, if applicable.
    /// </summary>
    public string? CommandLine { get; set; }

    /// <summary>
    ///     Path to the executable file of the process.
    /// </summary>
    public string? ExecutablePath { get; set; }

    /// <summary>
    ///     Total number of handles currently open by the process.
    /// </summary>
    public int HandleCount { get; set; }

    /// <summary>
    ///     Maximum working set size of the process.
    /// </summary>
    public int MaximumWorkingSetSize { get; set; }

    /// <summary>
    ///     Minimum working set size of the process.
    /// </summary>
    public int MinimumWorkingSetSize { get; set; }

    /// <summary>
    ///     Number of I/O operations performed, other than read and write operations.
    /// </summary>
    public long OtherOperationCount { get; set; }

    /// <summary>
    ///     Amount of data transferred during operations other than read and write operations.
    /// </summary>
    public long OtherTransferCount { get; set; }

    /// <summary>
    ///     Number of page faults generated by the process.
    /// </summary>
    public int PageFaults { get; set; }

    /// <summary>
    ///     Amount of page file space currently being used by the process.
    /// </summary>
    public int PageFileUsage { get; set; }

    /// <summary>
    ///     Identifier of the process that created this process.
    /// </summary>
    public int ParentProcessId { get; set; }

    /// <summary>
    ///     Peak amount of page file space used during the process's lifetime.
    /// </summary>
    public int PeakPageFileUsage { get; set; }

    /// <summary>
    ///     Peak virtual memory size, in bytes, used by the process.
    /// </summary>
    public long PeakVirtualSize { get; set; }

    /// <summary>
    ///     Peak working set size, in bytes, used by the process.
    /// </summary>
    public int PeakWorkingSetSize { get; set; }

    /// <summary>
    ///     Gets or sets the number of bytes allocated exclusively for this process in physical memory.
    /// </summary>
    public long PrivatePageCount { get; set; }

    /// <summary>
    ///     Unique identifier of the process.
    /// </summary>
    public int ProcessId { get; set; }

    /// <summary>
    ///     Amount of non-paged pool memory currently being used by the process.
    /// </summary>
    public int QuotaNonPagedPoolUsage { get; set; }

    /// <summary>
    ///     Amount of paged pool memory currently being used by the process.
    /// </summary>
    public int QuotaPagedPoolUsage { get; set; }

    /// <summary>
    ///     Peak amount of non-paged pool memory used during the process's lifetime.
    /// </summary>
    public int QuotaPeakNonPagedPoolUsage { get; set; }

    /// <summary>
    ///     Peak amount of paged pool memory used during the process's lifetime.
    /// </summary>
    public int QuotaPeakPagedPoolUsage { get; set; }

    /// <summary>
    ///     Number of read operations performed by the process.
    /// </summary>
    public long ReadOperationCount { get; set; }

    /// <summary>
    ///     Amount of data read by the process.
    /// </summary>
    public long ReadTransferCount { get; set; }

    /// <summary>
    ///     Identifier of the session under which the process is running.
    /// </summary>
    public int SessionId { get; set; }

    /// <summary>
    ///     Number of active threads in the process.
    /// </summary>
    public int ThreadCount { get; set; }

    /// <summary>
    ///     Current size of the virtual address space, in bytes, used by the process.
    /// </summary>
    public long VirtualSize { get; set; }

    /// <summary>
    ///     Version of Windows in which the process is running.
    /// </summary>
    public string? WindowsVersion { get; set; }

    /// <summary>
    ///     Number of write operations performed by the process.
    /// </summary>
    public long WriteOperationCount { get; set; }

    /// <summary>
    ///     Amount of data written by the process.
    /// </summary>
    public long WriteTransferCount { get; set; }
}
