<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ploch.Common</name>
    </assembly>
    <members>
        <member name="T:Ploch.Common.Collections.ArrayExtensions">
            <summary>
                Extension methods for <see cref="T:System.Array" /> class.
            </summary>
        </member>
        <member name="M:Ploch.Common.Collections.ArrayExtensions.Exists``1(``0[],System.Predicate{``0})">
            <summary>
                Checks if the array contains an item matching the specified predicate.
            </summary>
            <param name="array">The array.</param>
            <param name="predicate">The predicate for an item.</param>
            <typeparam name="TItem">The array item type.</typeparam>
            <returns><c>true</c> if array contains matching item, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ploch.Common.Collections.CollectionExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddIfNotNull``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
                Adds a pair of key / value to a collection or a dictionary if the <paramref name="value" /> is not null.
            </summary>
            <remarks>
                This method also provides a fluent interface by returning the same instance of <paramref name="collection" /> that
                values were added to.
            </remarks>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                the value of
                <param name="collection"></param>
                .
            </returns>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.Add``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
                Adds a pair of key / value to a collection or a dictionary items.
            </summary>
            <remarks>
                This method also provides a fluent interface by returning the same instance of <paramref name="collection" /> that
                values were added to.
            </remarks>
            <typeparam name="TKey">The type of <paramref name="key" /> parameter.</typeparam>
            <typeparam name="TValue">The type of <paramref name="value" /> parameter.</typeparam>
            <param name="collection">The collection or dictionary instance to add key and value to.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Same instance of collection that values were added to, providing fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddMany``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>Adds all items to the collection.</summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="collection">The collection instance.</param>
            <param name="items">Items to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="collection" /> or <paramref name="items" /> is
                <see langword="null" />.
            </exception>
            <returns>The source collection after addition, providing a fluent interface.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddMany``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds all items to the collection.</summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="collection">The collection instance.</param>
            <param name="items">Items to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="collection" /> or <paramref name="items" /> is
                <see langword="null" />.
            </exception>
            <returns>The source collection after addition, providing a fluent interface.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddManyInternal``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds items to a collection.
            </summary>
            <typeparam name="TItem">The type of items.</typeparam>
            <param name="collection">The collection to add items to.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="collection" /> or <paramref name="items" /> is
                <see langword="null" />.
            </exception>
        </member>
        <member name="T:Ploch.Common.Collections.EnumerableExtensions">
            <summary>
                IEnumerable (and related) extensions.
            </summary>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.ValueIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
                Checks if a set of values the value using provided comparer.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="comparer">The comparer.</param>
            <param name="values">The set of values.</param>
            <returns><c>true</c> if the set of values contains the value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.ValueIn``1(``0,``0[])">
            <summary>
                Checks if a set of values the value using default comparer.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">The set of values.</param>
            <returns><c>true</c> if the set of values contains the value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.ValueIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Checks if a set of values the value using provided comparer (or default comparer if null).
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">The set of values.</param>
            <param name="comparer">The comparer or null to use the default comparer.</param>
            <returns><c>true</c> if the set of values contains the value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Verifies that none of the items in the collection matches the predicate.
            </summary>
            <param name="source">The source collection.</param>
            <param name="predicate">The predicate.</param>
            <typeparam name="TSource">Collection item type.</typeparam>
            <returns><c>true</c> if none of the items matched the predicate,otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Joins the elements of the collection using the provided separator, calling <c>ToString</c> on each element of the
                collection.
            </summary>
            <param name="source">The source collection.</param>
            <param name="separator">The separator.</param>
            <typeparam name="TValue">The type of the collection element.</typeparam>
            <returns>String from joined elements.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.Join``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1})">
            <summary>
                Joins the elements of the collection using the provided separator, calling <paramref name="valueSelector" /> on
                each element.
            </summary>
            <param name="source">The source collection.</param>
            <param name="separator">The separator.</param>
            <param name="valueSelector">The selector of <typeparamref name="TValue" /> object property or an expression.</param>
            <typeparam name="TValue">The type of the collection element.</typeparam>
            <typeparam name="TResult">The resulting </typeparam>
            <returns>String from joined elements.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.JoinWithFinalSeparator``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
                Joins the elements of the collection using the provided separator, calling <c>ToString</c> on each element of the
                collection. The last element is joined using the <paramref name="finalSeparator" />.
            </summary>
            <param name="source">The source collection.</param>
            <param name="separator">The separator.</param>
            <param name="finalSeparator">The final separator.</param>
            <typeparam name="TValue">The type of the collection element.</typeparam>
            <returns>String from joined elements.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Randomly shuffles the elements of the source enumerable.
            </summary>
            <param name="source">The collection to shuffle.</param>
            <typeparam name="TValue">The type of values in the enumerable.</typeparam>
            <returns>Randomly shuffled enumerable.</returns>
        </member>
        <member name="T:Ploch.Common.ComparisonUtils">
            <summary>
                Comparison utility methods.
            </summary>
        </member>
        <member name="M:Ploch.Common.ComparisonUtils.IsNotDefault``1(``0)">
            <summary>
                Checks if the value is not equal to default (or null) value of the type.
            </summary>
            <remarks>
                Checks if a value type is not the default value (0 for int, false for bool, etc.) or if a reference type is not
                null.
            </remarks>
            <param name="value">The value.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>
                <c>true</c> if the value is default or null, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Ploch.Common.ComparisonUtils.IsDefault``1(``0)">
            <summary>
                Checks if the value is equal to default (or null) value of the type.
            </summary>
            <remarks>
                Checks if a value type is the default value (0 for int, false for bool, etc.) or if a reference type is
                null.
            </remarks>
            <param name="value">The value.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>
                <c>false</c> if the value is default or null, otherwise <c>true</c>
            </returns>
        </member>
        <member name="T:Ploch.Common.DateTimeExtensions">
            <summary>
                Extension methods for <see cref="T:System.DateTime" /> and related.
            </summary>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToEpochSeconds(System.DateTime)">
            <summary>
                Converts a <see cref="T:System.DateTime" /> to Epoch Seconds (Unix Timestamp - seconds since 00:00:00 UTC on 1 January
                1970).
            </summary>
            <remarks>
                <para>
                    Helper method which simply casts <c>DateTime</c> to <see cref="T:System.DateTimeOffset" /> and calls
                    <see cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />.
                </para>
                <para>
                    This class doesn't do any manipulations of time-zones, so the time zone of the provided instance of
                    <c>DateTime</c> will be used.
                </para>
            </remarks>
            <param name="dateTime">The date time.</param>
            <returns>Epoch seconds value.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToEpochSeconds(System.Nullable{System.DateTime})">
            <summary>
                Converts a <see cref="T:System.DateTime" /> to Epoch Seconds handling nullable values.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>Epoch seconds value or null if date time was null.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToDateTime(System.Int64)">
            <summary>
                Converts Epoch Seconds value to <see cref="T:System.DateTime" />.
            </summary>
            <param name="epochSecondsOrMilliseconds">The epoch seconds.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToDateTime``1(``0)">
            <summary>
                Converts Epoch Seconds value to <see cref="T:System.DateTime" />.
            </summary>
            <param name="epochSeconds">The epoch seconds.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToDateTime(System.Nullable{System.Int64})">
            <summary>
                Converts Epoch Seconds value to <see cref="T:System.DateTime" /> handling nullable values.
            </summary>
            <param name="epochSeconds">Epoch seconds.</param>
            <returns>Date time object or null if epoch seconds provided were null.</returns>
        </member>
        <member name="M:Ploch.Common.IO.PathUtils.GetDirectoryName(System.String)">
            <summary>
                Gets the (short) name of the directory.
            </summary>
            <param name="directoryPath">Directory path.</param>
            <returns>The name of the directory.</returns>
        </member>
        <member name="T:Ploch.Common.IsInExtensions">
            <summary>
                Class IsInExtensions.
            </summary>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.NotIn``1(``0,``0[])">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.In``1(``0,``0[])">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="T:Ploch.Common.Linq.ExpressionExtensions">
            <summary>
                Extension methods for <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
            <remarks>
                Contains various utility extension methods for working with <see cref="T:System.Linq.Expressions.Expression" /> objects.
            </remarks>
            <seealso cref="T:System.Linq.Expressions.Expression" />
        </member>
        <member name="M:Ploch.Common.Linq.ExpressionExtensions.GetMemberName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
                Gets the member name from an expression
            </summary>
            <typeparam name="TType">The type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Member name</returns>
            <exception cref="T:System.InvalidOperationException">Not a member expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression" /> value is <c>null</c>.</exception>
        </member>
        <member name="M:Ploch.Common.Linq.ExpressionExtensions.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the member name from an expression.
            </summary>
            <typeparam name="TMember">The member.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Member name</returns>
            <exception cref="T:System.InvalidOperationException">Not a member expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression" /> value is <c>null</c>.</exception>
        </member>
        <member name="M:Ploch.Common.Linq.ExpressionExtensions.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the member name from an expression
            </summary>
            <typeparam name="TType">Member parent type</typeparam>
            <typeparam name="TMember">Member type</typeparam>
            <param name="expression">Expression</param>
            <returns>Member name</returns>
            <exception cref="T:System.InvalidOperationException">Not a member expression and not unary expression for member.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="argument" /> value is <c>null</c> and the argument is not modified
                since it is initialized.
            </exception>
        </member>
        <member name="T:Ploch.Common.NamespaceDoc">
            <summary>
                Ploch.Common namespace contains extension methods and utility classes for classes in the System namespace.
            </summary>
        </member>
        <member name="T:Ploch.Common.ObjectCloningHelpers">
            <summary>
                Class ObjectCloningHelpers.
            </summary>
            <remarks>
                Contains various static methods useful when copying properties / cloning objects.
            </remarks>
        </member>
        <member name="T:Ploch.Common.Reflection.AssemblyExtensions">
            <summary>
                Extension utility methods for an <see cref="T:System.Reflection.Assembly" />.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.AssemblyExtensions.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
                Gets the directory name where assembly is located
            </summary>
            <param name="assembly">The assembly</param>
            <returns>The directory name where assembly is located.</returns>
        </member>
        <member name="T:Ploch.Common.Reflection.PropertyHelpers">
            <summary>
                Common reflection tasks convenience object extensions.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetProperties``1(System.Object,System.Boolean)">
            <summary>
                Gets the <see langword="public" /> properties of specific type.
            </summary>
            <typeparam name="TPropertyType">
                The type of the properties to return.
            </typeparam>
            <param name="obj">The object.</param>
            <param name="includeSubTypes">
                Include sub types of <typeparamref name="TPropertyType" /> in
                results.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="obj" /> is <see langword="null" />.
            </exception>
            <returns>
                List of <see langword="public" /> properties of specific type.(
                <see cref="T:System.Reflection.PropertyInfo" /> s).
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
                Sets the property.
            </summary>
            <typeparam name="T">The type of a property.</typeparam>
            <param name="obj">The object type.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                More than one property is found with the specified name. See
                Remarks.
            </exception>
            <exception cref="T:System.Reflection.TargetException">
                In the .NET for Windows Store apps or the Portable Class Library,
                <see langword="catch" /> <see cref="T:System.Exception" /> instead. The type
                of <paramref name="obj" /> does not match the target type, or a
                property is an instance property but <paramref name="obj" /> is
                null.
            </exception>
            <exception cref="T:System.MethodAccessException">
                In the .NET for Windows Store apps or the Portable Class Library,
                <see langword="catch" /> the base class exception,
                <see cref="T:System.MemberAccessException" /> , instead. There was an illegal
                attempt to access a <see langword="private" /> or
                <see langword="protected" /> method inside a class.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
                An error occurred while setting the property value. The
                <see cref="P:System.Exception.InnerException" /> property indicates
                the reason for the error.
            </exception>
            <exception cref="T:Ploch.Common.Reflection.PropertyNotFoundException">
                If <paramref name="propertyName" /> property is not found.
            </exception>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetPropertyValue``1(``0,System.String)">
            <summary>
                Gets the property value.
            </summary>
            <typeparam name="T">Object type.</typeparam>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                More than one property is found with the specified name. See
                Remarks.
            </exception>
            <exception cref="T:Ploch.Common.Reflection.PropertyNotFoundException">
                If <paramref name="propertyName" /> property is not found.
            </exception>
            <returns>
                Property value.
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.HasProperty(System.Object,System.String)">
            <summary>
                Determines whether the specified property name has property.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                More than one property is found with the specified name. See
                Remarks.
            </exception>
            <returns>
                <c>true</c> if the specified property name has property; otherwise,
                <c>false</c> .
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetPropertyInfo(System.Type,System.String,System.Boolean)">
            <summary>
                Gets the property information.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="throwIfNotFound">
                if set to <c>true</c> throws
                <see cref="T:Ploch.Common.Reflection.PropertyNotFoundException" /> if property is not found.
            </param>
            <exception cref="T:Ploch.Common.Reflection.PropertyNotFoundException">
                if <paramref name="throwIfNotFound" /> is <c>true</c> and property
                is not found.
            </exception>
            <returns>
                Property information.
            </returns>
        </member>
        <member name="T:Ploch.Common.Reflection.TypeExtensions">
            <summary>
                <see cref="T:System.Type" /> extension methods.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.TypeExtensions.IsImplementing(System.Type,System.Type)">
            <summary>
                Checks if the type provided is implementing the specified interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">The type of interface.</param>
            <returns>
                <c>true</c> if the <paramref name="type" /> is implementing <paramref name="interfaceType" />, false
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
                Checks if the type provided is an <see cref="T:System.Collections.IEnumerable" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the provided type is <see cref="T:System.Collections.IEnumerable" />, otherwise false.</returns>
        </member>
        <member name="T:Ploch.Common.StringBuilderExtensions">
            <summary>
                Extension methods for <see cref="T:System.Text.StringBuilder" />
            </summary>
        </member>
        <member name="M:Ploch.Common.StringBuilderExtensions.AppendIfNotNull``1(System.Text.StringBuilder,``0,System.Func{``0,System.String})">
            <summary>
                Appends the <paramref name="value" /> to the <paramref name="builder" /> if the <paramref name="value" /> is not
                null.
            </summary>
            <param name="builder">The <c>StringBuilder</c></param>
            <param name="value">The value to append.</param>
            <param name="formatFunc">Optional formatting function.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The source <c>StringBuilder</c>.</returns>
        </member>
        <member name="M:Ploch.Common.StringBuilderExtensions.AppendIfNotNullOrEmpty``1(System.Text.StringBuilder,``0,System.Func{``0,System.String})">
            <summary>
                Appends the <paramref name="value" /> to the <paramref name="builder" /> if the <paramref name="value" /> is not
                null or empty string.
            </summary>
            <param name="builder">The <c>StringBuilder</c></param>
            <param name="value">The value to append.</param>
            <param name="formatFunc">Optional formatting function.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The source <c>StringBuilder</c>.</returns>
        </member>
        <member name="T:Ploch.Common.StringExtensions">
            <summary>
                Extension methods for <see cref="T:System.String" /> and related.
            </summary>
        </member>
        <member name="M:Ploch.Common.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
                Extension method version of <see cref="M:System.String.IsNullOrEmpty(System.String)" />.
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if string is <c>null</c> or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ToBase64String(System.String)">
            <summary>
                Encodes a string as base64 string using <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="str">The string.</param>
            <returns>Encoded version of supplied string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
                Encodes a string as base64 string.
            </summary>
            <param name="str">The string.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>Encoded version of supplied string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.FromBase64String(System.String)">
            <summary>
                Decodes a base64 string using <see cref="P:System.Text.Encoding.UTF8" /> encoding.
            </summary>
            <param name="str">The base64 encoded string.</param>
            <returns>The decoded base64 string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
                Decodes a base64 string using provided encoding.
            </summary>
            <param name="str">The base64 encoded string.</param>
            <param name="encoding">The <paramref name="str" /> encoding.</param>
            <returns>The decoded base64 string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
                Compare two strings ignoring case.
            </summary>
            <param name="str">The first string to compare.</param>
            <param name="other">The second string to compare.</param>
            <returns><c>true</c> if strings are equal ignoring case, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ReplaceStart(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Replaces the
                <param name="oldValue"></param>
                with
                <param name="newValue"></param>
                in the string
                <param name="str"></param>
                if the string starts with
                <param name="oldValue"></param>
                .
            </summary>
            <param name="str">The string.</param>
            <param name="oldValue">The old value to replace.</param>
            <param name="newValue">The new value to replace the old value with.</param>
            <param name="stringComparison">
                The string comparison to use when checking if the <paramref name="str" /> starts with
                <paramref name="oldValue" />. If not provided, then <see cref="F:System.StringComparison.InvariantCulture" /> will be used.
            </param>
            <returns>The provided string with a new value at the beginning or the original <paramref name="str" />.</returns>
        </member>
    </members>
</doc>
