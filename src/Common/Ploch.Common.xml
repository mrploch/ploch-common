<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ploch.Common</name>
    </assembly>
    <members>
        <member name="T:Ploch.Common.AssemblyInformation">
            <summary>
            Represents information about an assembly.
            </summary>
        </member>
        <member name="M:Ploch.Common.AssemblyInformation.#ctor(System.String,System.String,System.String)">
            <summary>
            Represents information about an assembly.
            </summary>
        </member>
        <member name="M:Ploch.Common.AssemblyInformation.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the AssemblyInformation class with the specified assembly.
            </summary>
            <param name="assembly">The assembly to retrieve information from.</param>
        </member>
        <member name="P:Ploch.Common.AssemblyInformation.Product">
            <summary>
            Gets the product name.
            </summary>
            <value>
            The product name.
            </value>
        </member>
        <member name="P:Ploch.Common.AssemblyInformation.Description">
            <summary>
            Gets the description of the property.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Ploch.Common.AssemblyInformation.Version">
            <summary>
            Gets the version of the software.
            </summary>
            <value>
            The version of the software.
            </value>
        </member>
        <member name="T:Ploch.Common.AssemblyInformationProvider">
            <summary>
            Provides methods to retrieve information about the assembly of an object or a type.
            </summary>
        </member>
        <member name="M:Ploch.Common.AssemblyInformationProvider.GetAssemblyInformation(System.Object)">
            <summary>
            Retrieves the assembly information for the given object.
            </summary>
            <param name="obj">The object to get the assembly information for.</param>
            <returns>The <see cref="T:Ploch.Common.AssemblyInformation"/> representing the assembly information.</returns>
        </member>
        <member name="M:Ploch.Common.AssemblyInformationProvider.GetAssemblyInformation(System.Type)">
            <summary>
            Gets the assembly information for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to retrieve the assembly information for.</param>
            <returns>An instance of <see cref="T:Ploch.Common.AssemblyInformation"/> containing the assembly information.</returns>
        </member>
        <member name="T:Ploch.Common.Collections.ArrayExtensions">
            <summary>
                Extension methods for <see cref="T:System.Array" /> class.
            </summary>
        </member>
        <member name="M:Ploch.Common.Collections.ArrayExtensions.Exists``1(``0[],System.Predicate{``0})">
            <summary>
                Checks if the array contains an item matching the specified predicate.
            </summary>
            <param name="array">The array.</param>
            <param name="predicate">The predicate for an item.</param>
            <typeparam name="TItem">The array item type.</typeparam>
            <returns><c>true</c> if array contains matching item, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ploch.Common.Collections.CollectionExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddIfNotNull``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
                Adds a pair of key / value to a collection or a dictionary if the <paramref name="value" /> is not null.
            </summary>
            <remarks>
                This method also provides a fluent interface by returning the same instance of <paramref name="collection" /> that
                values were added to.
            </remarks>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
                the value of
                <paramref name="collection" />
                .
            </returns>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.Add``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
                Adds a pair of key / value to a collection or a dictionary items.
            </summary>
            <remarks>
                This method also provides a fluent interface by returning the same instance of <paramref name="collection" /> that
                values were added to.
            </remarks>
            <typeparam name="TKey">The type of <paramref name="key" /> parameter.</typeparam>
            <typeparam name="TValue">The type of <paramref name="value" /> parameter.</typeparam>
            <param name="collection">The collection or dictionary instance to add key and value to.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Same instance of collection that values were added to, providing fluent interface.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddMany``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>Adds all items to the collection.</summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="collection">The collection instance.</param>
            <param name="items">Items to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="collection" /> or <paramref name="items" /> is
                <see langword="null" />.
            </exception>
            <returns>The source collection after addition, providing a fluent interface.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddMany``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds all items to the collection.</summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="collection">The collection instance.</param>
            <param name="items">Items to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="collection" /> or <paramref name="items" /> is
                <see langword="null" />.
            </exception>
            <returns>The source collection after addition, providing a fluent interface.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.CollectionExtensions.AddManyInternal``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds items to a collection.
            </summary>
            <typeparam name="TItem">The type of items.</typeparam>
            <param name="collection">The collection to add items to.</param>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="collection" /> or <paramref name="items" /> is
                <see langword="null" />.
            </exception>
        </member>
        <member name="T:Ploch.Common.Collections.EnumerableExtensions">
            <summary>
                IEnumerable (and related) extensions.
            </summary>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.ValueIn``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
                Checks if a set of values the value using provided comparer.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="comparer">The comparer.</param>
            <param name="values">The set of values.</param>
            <returns><c>true</c> if the set of values contains the value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.ValueIn``1(``0,``0[])">
            <summary>
                Checks if a set of values the value using default comparer.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">The set of values.</param>
            <returns><c>true</c> if the set of values contains the value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.ValueIn``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Checks if a set of values the value using provided comparer (or default comparer if null).
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">The set of values.</param>
            <param name="comparer">The comparer or null to use the default comparer.</param>
            <returns><c>true</c> if the set of values contains the value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Verifies that none of the items in the collection matches the predicate.
            </summary>
            <param name="source">The source collection.</param>
            <param name="predicate">The predicate.</param>
            <typeparam name="TSource">Collection item type.</typeparam>
            <returns><c>true</c> if none of the items matched the predicate,otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Joins the elements of the collection using the provided separator, calling <c>ToString</c> on each element of the
                collection.
            </summary>
            <param name="source">The source collection.</param>
            <param name="separator">The separator.</param>
            <typeparam name="TValue">The type of the collection element.</typeparam>
            <returns>String from joined elements.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.Join``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1})">
            <summary>
                Joins the elements of the collection using the provided separator, calling <paramref name="valueSelector" /> on
                each element.
            </summary>
            <param name="source">The source collection.</param>
            <param name="separator">The separator.</param>
            <param name="valueSelector">The selector of <typeparamref name="TValue" /> object property or an expression.</param>
            <typeparam name="TValue">The type of the collection element.</typeparam>
            <typeparam name="TResult">The resulting.</typeparam>
            <returns>String from joined elements.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.JoinWithFinalSeparator``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
                Joins the elements of the collection using the provided separator, calling <c>ToString</c> on each element of the
                collection. The last element is joined using the <paramref name="finalSeparator" />.
            </summary>
            <param name="source">The source collection.</param>
            <param name="separator">The separator.</param>
            <param name="finalSeparator">The final separator.</param>
            <typeparam name="TValue">The type of the collection element.</typeparam>
            <returns>String from joined elements.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.JoinWithFinalSeparator``2(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Func{``0,``1})">
            <summary>
                Joins the elements of a sequence by a separator, with a final separator for the last two elements.
            </summary>
            <typeparam name="TValue">The type of the elements in the sequence.</typeparam>
            <typeparam name="TResult">The type of the result after applying the valueSelector function.</typeparam>
            <param name="source">The sequence to join.</param>
            <param name="separator">The separator to be used between elements.</param>
            <param name="finalSeparator">The separator to be used between the last two elements.</param>
            <param name="valueSelector">A function to select a result value from each element.</param>
            <returns>A string that consists of the joined elements with the separators.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Randomly shuffles the elements of the source enumerable.
            </summary>
            <param name="source">The collection to shuffle.</param>
            <typeparam name="TValue">The type of values in the enumerable.</typeparam>
            <returns>Randomly shuffled enumerable.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.TakeRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Takes random <paramref name="count" /> amount of items from the <paramref name="source" /> enumerable.
            </summary>
            <param name="source">The source enumerable.</param>
            <param name="count">The number of values to take.</param>
            <typeparam name="TValue">The enumerable value type.</typeparam>
            <returns>The random items from the source enumerable.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.If``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Creates an enumerable query if the condition is true.
            </summary>
            <remarks>
                This method is useful when you want to conditionally add a where clause to a query.
            </remarks>
            <example>
                Method below returns a list of cars ordered by creation date.
                If the <c>createdAfter</c> is not null, the query will be filtered by the creation date.
                If the <c>createdBefore</c> is not null, the query will be further filtered by the creation date.
                <code>
            var carsList = GetCars();
            carsList.OrderBy(x =&gt; x.Created)
            .If(createdAfter.HasValue, x =&gt; x.Where(y =&gt; y.Created &gt; createdAfter!.Value))
            .If(createdBefore.HasValue, x =&gt; x.Where(y =&gt; y.Created &lt; createdBefore!.Value))
            .If(first.HasValue, x =&gt; x.Take(first!.Value))
            </code>
            </example>
            <param name="enumerable">The source enumerable.</param>
            <param name="condition">The condition.</param>
            <param name="action">The query action to perform on <paramref name="enumerable" />.</param>
            <typeparam name="T">The enumerable value type.</typeparam>
            <returns>The resulting enumerable.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs the specified action on each element of the <paramref name="enumerable" />.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action to perform on each element.</param>
            <typeparam name="T">The enumerable type.</typeparam>
            <returns>The same enumerable.</returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.AreIntegersSequentialInOrder(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
                Determines whether the elements in the given enumerable are sequential.
            </summary>
            <param name="enumerable">
                The enumerable to check for sequentiality. Must not be null.
            </param>
            <returns>
                True if the elements in the enumerable are sequential; otherwise, false.
            </returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.AreIntegersSequentialInOrder(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Determines whether the elements in the given enumerable are sequential.
            </summary>
            <param name="enumerable">
                The enumerable to check for sequentiality. Must not be null.
            </param>
            <returns>
                True if the elements in the enumerable are sequential; otherwise, false.
            </returns>
        </member>
        <member name="M:Ploch.Common.Collections.EnumerableExtensions.NullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the specified collection is null or empty.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="enumerable">The collection to check.</param>
            <returns>true if the collection is null or empty; otherwise, false.</returns>
        </member>
        <member name="T:Ploch.Common.Collections.QueryableExtensions">
            <summary>
                Extension methods for the <see cref="T:System.Linq.IQueryable`1" /> interface.
            </summary>
        </member>
        <member name="M:Ploch.Common.Collections.QueryableExtensions.If``1(System.Linq.IQueryable{``0},System.Boolean,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
                Creates an enumerable query if the condition is true.
            </summary>
            <remarks>
                This method is useful when you want to conditionally add a where clause to a query.
            </remarks>
            <example>
                Method below returns a list of cars ordered by creation date.
                If the <c>createdAfter</c> is not null, the query will be filtered by the creation date.
                If the <c>createdBefore</c> is not null, the query will be further filtered by the creation date.
                <code>
            var carsList = GetCars();
            carsList.OrderBy(x =&gt; x.Created)
            .If(createdAfter.HasValue, x =&gt; x.Where(y =&gt; y.Created &gt; createdAfter!.Value))
            .If(createdBefore.HasValue, x =&gt; x.Where(y =&gt; y.Created &lt; createdBefore!.Value))
            .If(first.HasValue, x =&gt; x.Take(first!.Value))
            </code>
            </example>
            <param name="queryable">The source enumerable.</param>
            <param name="condition">The condition.</param>
            <param name="action">The query action to perform on <paramref name="queryable" />.</param>
            <typeparam name="T">The enumerable value type.</typeparam>
            <returns>The resulting enumerable.</returns>
        </member>
        <member name="T:Ploch.Common.ComparisonUtils">
            <summary>
                Comparison utility methods.
            </summary>
        </member>
        <member name="M:Ploch.Common.ComparisonUtils.IsNotDefault``1(``0)">
            <summary>
                Checks if the value is not equal to default (or null) value of the type.
            </summary>
            <remarks>
                Checks if a value type is not the default value (0 for int, false for bool, etc.) or if a reference type is not
                null.
            </remarks>
            <param name="value">The value.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>
                <c>true</c> if the value is default or null, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Ploch.Common.ComparisonUtils.IsDefault``1(``0)">
            <summary>
                Checks if the value is equal to default (or null) value of the type.
            </summary>
            <remarks>
                Checks if a value type is the default value (0 for int, false for bool, etc.) or if a reference type is
                null.
            </remarks>
            <param name="value">The value.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>
                <c>false</c> if the value is default or null, otherwise <c>true</c>
            </returns>
        </member>
        <member name="T:Ploch.Common.Cryptography.Hashing">
            <summary>
            Provides hashing utility methods for strings.
            </summary>
        </member>
        <member name="M:Ploch.Common.Cryptography.Hashing.ToHashString(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Converts the content of a stream into a hash string using the specified hash algorithm.
            </summary>
            <param name="stream">The stream whose content will be hashed.</param>
            <param name="algorithm">The hash algorithm to be used.</param>
            <returns>A string representation of the computed hash.</returns>
        </member>
        <member name="M:Ploch.Common.Cryptography.Hashing.ToMD5HashString(System.IO.Stream)">
            <summary>
            Converts the contents of a Stream into a MD5 hash string.
            </summary>
            <param name="stream">The input Stream to convert.</param>
            <returns>The MD5 hash string of the input Stream.</returns>
        </member>
        <member name="T:Ploch.Common.DateTimeExtensions">
            <summary>
                Extension methods for <see cref="T:System.DateTime" /> and related.
            </summary>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToEpochSeconds(System.DateTime)">
            <summary>
                Converts a <see cref="T:System.DateTime" /> to Epoch Seconds (Unix Timestamp - seconds since 00:00:00 UTC on 1 January
                1970).
            </summary>
            <remarks>
                <para>
                    Helper method which simply casts <c>DateTime</c> to <see cref="T:System.DateTimeOffset" /> and calls
                    <see cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />.
                </para>
                <para>
                    This class doesn't do any manipulations of time-zones, so the time zone of the provided instance of
                    <c>DateTime</c> will be used.
                </para>
            </remarks>
            <param name="dateTime">The date time.</param>
            <returns>Epoch seconds value.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToEpochSeconds(System.Nullable{System.DateTime})">
            <summary>
                Converts a <see cref="T:System.DateTime" /> to Epoch Seconds handling nullable values.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>Epoch seconds value or null if date time was null.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToDateTime(System.Int64)">
            <summary>
                Converts Epoch Seconds value to <see cref="T:System.DateTime" />.
            </summary>
            <param name="epochSecondsOrMilliseconds">The epoch seconds.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToDateTime``1(``0)">
            <summary>
                Converts Epoch Seconds value to <see cref="T:System.DateTime" />.
            </summary>
            <param name="epochSeconds">The epoch seconds.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Ploch.Common.DateTimeExtensions.ToDateTime(System.Nullable{System.Int64})">
            <summary>
                Converts Epoch Seconds value to <see cref="T:System.DateTime" /> handling nullable values.
            </summary>
            <param name="epochSeconds">Epoch seconds.</param>
            <returns>Date time object or null if epoch seconds provided were null.</returns>
        </member>
        <member name="T:Ploch.Common.EnumHelper">
            <summary>
                Provides helper methods for working with enums.
            </summary>
        </member>
        <member name="M:Ploch.Common.EnumHelper.GetEnumEntries``1">
            <summary>
                Gets all enum entries.
            </summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <returns>All enum entries.</returns>
        </member>
        <member name="T:Ploch.Common.EnvironmentUtilities">
            <summary>
            Utility class for common operations related to the environment.
            </summary>
        </member>
        <member name="M:Ploch.Common.EnvironmentUtilities.GetCurrentAppPath">
            <summary>
            Returns the current application's directory path.
            </summary>
            <returns>The current application's directory path.</returns>
        </member>
        <member name="M:Ploch.Common.EnvironmentUtilities.GetEnvironmentCommandLine(System.Boolean)">
            <summary>
            Retrieves the command line arguments passed to the application.
            </summary>
            <param name="includeApplication">If set to true, includes the name of the application in the returned argument list. Default is false.</param>
            <returns>An enumerable collection of command line arguments.</returns>
        </member>
        <member name="T:Ploch.Common.IO.PathUtils">
            <summary>
            Utility class for manipulating path related operations.
            </summary>
        </member>
        <member name="M:Ploch.Common.IO.PathUtils.GetDirectoryName(System.String)">
            <summary>
                Gets the (short) name of the directory.
            </summary>
            <param name="directoryPath">Directory path.</param>
            <returns>The name of the directory.</returns>
        </member>
        <member name="T:Ploch.Common.IO.StreamExtensions">
            <summary>
            A static class providing extension methods for Stream objects.
            </summary>
        </member>
        <member name="M:Ploch.Common.IO.StreamExtensions.ToBytes(System.IO.Stream)">
            <summary>
            Converts the contents of a stream to a byte array.
            </summary>
            <param name="stream">The stream to convert.</param>
            <returns>An enumerable byte array representing the contents of the stream.</returns>
        </member>
        <member name="T:Ploch.Common.IsInExtensions">
            <summary>
                Class IsInExtensions.
            </summary>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.NotIn``1(``0,``0[])">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.In``1(``0,``0[])">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.IsInExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks if the <paramref name="value" /> is equal to one of the <paramref name="values" /> provided.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="values">Values to try match against.</param>
            <returns>
                <c>true</c> if the <paramref name="value" /> is equal to one of the <paramref name="values" />, <c>false</c>
                otherwise.
            </returns>
        </member>
        <member name="T:Ploch.Common.Linq.ExpressionExtensions">
            <summary>
                Extension methods for <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
            <remarks>
                Contains various utility extension methods for working with <see cref="T:System.Linq.Expressions.Expression" /> objects.
            </remarks>
            <seealso cref="T:System.Linq.Expressions.Expression" />
        </member>
        <member name="M:Ploch.Common.Linq.ExpressionExtensions.GetMemberName(System.Linq.Expressions.Expression{System.Action})">
            <summary>
                Gets the member name from an expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Member name.</returns>
            <exception cref="T:System.InvalidOperationException">Not a member expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression" /> value is <c>null</c>.</exception>
        </member>
        <member name="M:Ploch.Common.Linq.ExpressionExtensions.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the member name from an expression.
            </summary>
            <typeparam name="TMember">The member.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Member name.</returns>
            <exception cref="T:System.InvalidOperationException">Not a member expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression" /> value is <c>null</c>.</exception>
        </member>
        <member name="M:Ploch.Common.Linq.ExpressionExtensions.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the member name from an expression.
            </summary>
            <typeparam name="TType">Member parent type.</typeparam>
            <typeparam name="TMember">Member type.</typeparam>
            <param name="expression">Expression.</param>
            <returns>Member name.</returns>
            <exception cref="T:System.InvalidOperationException">Not a member expression and not unary expression for member.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="expression" /> value is <c>null</c> and the argument is not modified
                since it is initialized.
            </exception>
        </member>
        <member name="M:Ploch.Common.Linq.ExpressionExtensions.GetProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Retrieves property information based on the provided property selector expression.
            </summary>
            <typeparam name="TType">The type of the object.</typeparam>
            <typeparam name="TMember">The type of the property.</typeparam>
            <param name="obj">The object instance.</param>
            <param name="propertySelector">The property selector expression.</param>
            <returns>An instance of <see cref="T:Ploch.Common.Linq.IOwnedPropertyInfo`2" /> representing the property information.</returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the provided <paramref name="propertySelector" /> is not a
                property expression.
            </exception>
        </member>
        <member name="T:Ploch.Common.Linq.IOwnedPropertyInfo">
            <summary>
                Represents an interface for retrieving and setting the value of a property
                owned by an instance of an object.
            </summary>
            <remarks>
                <para>
                    This interface represents a property in a specific instance of an object. Instances of this interface
                    provide an easy way to retrieve and set the value of a property.
                    It wraps the PropertyInfo and connects it with a specific owning object instance.
                </para>
                <para>
                    It is extensively used by the <see cref="T:Ploch.Common.Linq.ExpressionExtensions" /> class.
                </para>
            </remarks>
            <seealso cref="T:Ploch.Common.Linq.ExpressionExtensions" />
            <see cref="P:Ploch.Common.Linq.IOwnedPropertyInfo.PropertyInfo" />
        </member>
        <member name="P:Ploch.Common.Linq.IOwnedPropertyInfo.Name">
            <summary>
                Returns the name of the property.
            </summary>
        </member>
        <member name="P:Ploch.Common.Linq.IOwnedPropertyInfo.PropertyInfo">
            <summary>
                Returns the underlying <see cref="P:Ploch.Common.Linq.IOwnedPropertyInfo.PropertyInfo" />.
            </summary>
        </member>
        <member name="P:Ploch.Common.Linq.IOwnedPropertyInfo.Owner">
            <summary>
                Gets the object that owns the property.
            </summary>
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo.GetValue">
            <summary>
                Retrieves a value of the property.
            </summary>
            <returns>A value of the property.</returns>
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo.GetValue(System.Object[])">
            <summary>
                Retrieves a value of the index property.
            </summary>
            <param name="index">The property index.</param>
            <returns>The property value at the specified index.</returns>
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo.SetValue(System.Object)">
            <summary>
                Sets a value of the property.
            </summary>
            <param name="value">A value to set the property to.</param>
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo.SetValue(System.Object,System.Object[])">
            <summary>
                Sets a value of the index property at the specified index.
            </summary>
            <param name="value">A value to set the property to.</param>
            <param name="index">The index value where to set the property value.</param>
        </member>
        <member name="T:Ploch.Common.Linq.IOwnedPropertyInfo`2">
            <typeparam name="TType">The object type that owns the property.</typeparam>
            <typeparam name="TProperty">The type of the property value.</typeparam>
            <inheritdoc />
        </member>
        <member name="P:Ploch.Common.Linq.IOwnedPropertyInfo`2.Owner">
            <inheritdoc cref="P:Ploch.Common.Linq.IOwnedPropertyInfo.Owner" />
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo`2.GetValue">
            <inheritdoc cref="M:Ploch.Common.Linq.IOwnedPropertyInfo.GetValue" />
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo`2.GetValue(System.Object[])">
            <inheritdoc cref="M:Ploch.Common.Linq.IOwnedPropertyInfo.GetValue(System.Object[])" />
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo`2.SetValue(`1)">
            <inheritdoc cref="M:Ploch.Common.Linq.IOwnedPropertyInfo.SetValue(System.Object)" />
        </member>
        <member name="M:Ploch.Common.Linq.IOwnedPropertyInfo`2.SetValue(`1,System.Object[])">
            <inheritdoc cref="M:Ploch.Common.Linq.IOwnedPropertyInfo.SetValue(System.Object,System.Object[])" />
        </member>
        <member name="T:Ploch.Common.Linq.OwnedPropertyInfo">
            <inheritdoc cref="T:Ploch.Common.Linq.IOwnedPropertyInfo" />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Ploch.Common.Linq.OwnedPropertyInfo" /> class.
            </summary>
            <param name="propertyInfo">The property info delegate.</param>
            <param name="owner">The object that owns the property.</param>
        </member>
        <member name="P:Ploch.Common.Linq.OwnedPropertyInfo.Owner">
            <inheritdoc />
        </member>
        <member name="P:Ploch.Common.Linq.OwnedPropertyInfo.PropertyInfo">
            <inheritdoc />
        </member>
        <member name="P:Ploch.Common.Linq.OwnedPropertyInfo.Name">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo.SetValue(System.Object,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo.GetValue(System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Ploch.Common.Linq.OwnedPropertyInfo`2">
            <inheritdoc cref="T:Ploch.Common.Linq.IOwnedPropertyInfo`2" />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.#ctor(System.Reflection.PropertyInfo,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Ploch.Common.Linq.OwnedPropertyInfo`2" /> class.
            </summary>
            <param name="propertyInfo">The property info delegate.</param>
            <param name="owner">The object that owns the property.</param>
        </member>
        <member name="P:Ploch.Common.Linq.OwnedPropertyInfo`2.Owner">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.GetValue(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.Ploch#Common#Linq#IOwnedPropertyInfo#SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.Ploch#Common#Linq#IOwnedPropertyInfo#SetValue(System.Object,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.SetValue(`1)">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.SetValue(`1,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Ploch.Common.Linq.OwnedPropertyInfo`2.Ploch#Common#Linq#IOwnedPropertyInfo#GetValue">
            <inheritdoc />
        </member>
        <member name="T:Ploch.Common.NamespaceDoc">
            <summary>
                Ploch.Common namespace contains extension methods and utility classes for classes in the System namespace.
            </summary>
        </member>
        <member name="T:Ploch.Common.ObjectCloningHelpers">
            <summary>
                Class ObjectCloningHelpers.
            </summary>
            <remarks>
                Contains various static methods useful when copying properties / cloning objects.
            </remarks>
        </member>
        <member name="M:Ploch.Common.ObjectCloningHelpers.CopyProperties``1(``0,``0)">
            <summary>
                Copies all of the properties of the source object to the target object.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <typeparam name="T">The object type.</typeparam>
        </member>
        <member name="M:Ploch.Common.ObjectCloningHelpers.CopyPropertiesIncludeOnly``1(``0,``0,System.String[])">
            <summary>
                Copies the properties of the source object to the target object, but only the properties specified in the
                includedProperties array.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="includedProperties">The properties to include or null to copy all.</param>
            <typeparam name="T">The object type.</typeparam>
        </member>
        <member name="M:Ploch.Common.ObjectCloningHelpers.CopyPropertiesExcluding``1(``0,``0,System.String[])">
            <summary>
                Copies the properties of the source object to the target object, excluding the properties specified in the
                excludedProperties array.
            </summary>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="excludedProperties">The properties to exclude or null to not exclude anything.</param>
            <typeparam name="T">The object type.</typeparam>
        </member>
        <member name="T:Ploch.Common.Randomizers.BooleanRandomizer">
            <summary>
            Provides functionality to generate random boolean values.
            </summary>
            <remarks>
            This class implements the <see cref="T:Ploch.Common.Randomizers.IRandomizer`1"/> interface to generate random boolean values.
            </remarks>
        </member>
        <member name="M:Ploch.Common.Randomizers.BooleanRandomizer.GetValue">
            <summary>
            Generates a random boolean value.
            </summary>
            <returns>A randomly generated boolean value.</returns>
            <remarks>
            This method uses the <see cref="T:System.Random"/> class to generate a boolean value.
            </remarks>
        </member>
        <member name="T:Ploch.Common.Randomizers.DateTimeRandomizer">
            <summary>
            Provides functionality to generate random <see cref="T:System.DateTime"/> values.
            </summary>
            <remarks>
            This class implements the <see cref="T:Ploch.Common.Randomizers.IRandomizer`1"/> interface to generate random dates.
            </remarks>
        </member>
        <member name="M:Ploch.Common.Randomizers.DateTimeRandomizer.GetValue">
            <summary>
            Generates a random <see cref="T:System.DateTime"/> value.
            </summary>
            <returns>A randomly generated <see cref="T:System.DateTime"/> value.</returns>
            <remarks>
            This method generates a random date between <see cref="F:System.DateTime.MinValue"/> and today's date.
            </remarks>
        </member>
        <member name="T:Ploch.Common.Randomizers.IntRandomizer">
            <summary>
            Provides functionality to generate random integer values.
            </summary>
            <remarks>
            This class implements the <see cref="T:Ploch.Common.Randomizers.IRandomizer`1"/> interface to generate random integers.
            </remarks>
        </member>
        <member name="M:Ploch.Common.Randomizers.IntRandomizer.GetValue">
            <summary>
            Generates a random integer value.
            </summary>
            <returns>A randomly generated integer value.</returns>
            <remarks>
            This method uses the <see cref="T:System.Random"/> class to generate a random integer.
            </remarks>
        </member>
        <member name="T:Ploch.Common.Randomizers.IRandomizer`1">
            <summary>
            A generic interface for random value generators.
            </summary>
            <typeparam name="TValue">The type of generated random values.</typeparam>
        </member>
        <member name="M:Ploch.Common.Randomizers.IRandomizer`1.GetValue">
            <summary>
            Generates a random value of type <typeparamref name="TValue"/>.
            </summary>
            <returns>A random value of type <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="T:Ploch.Common.Randomizers.Randomizer">
            <summary>
            Factory for random value generators.
            </summary>
            <remarks>
            Class provides a factory method to get an instance of <see cref="T:Ploch.Common.Randomizers.IRandomizer`1"/> for a given type.
            </remarks>
        </member>
        <member name="M:Ploch.Common.Randomizers.Randomizer.GetRandomizer``1">
            <summary>
            Returns an instance of <see cref="T:Ploch.Common.Randomizers.IRandomizer`1"/> for the specified type.
            </summary>
            <typeparam name="TValue">Type to return a randomizer for.</typeparam>
            <returns>An instance of a <see cref="T:Ploch.Common.Randomizers.IRandomizer`1"/> for the given type.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when there is no randomizer for the given type.</exception>
        </member>
        <member name="T:Ploch.Common.Randomizers.StringRandomizer">
            <summary>
            Provides functionality to generate random string values.
            </summary>
            <remarks>
            This class implements the <see cref="T:Ploch.Common.Randomizers.IRandomizer`1"/> interface to generate random strings.
            </remarks>
        </member>
        <member name="M:Ploch.Common.Randomizers.StringRandomizer.GetValue">
            <summary>
            Generates a random string value.
            </summary>
            <returns>A randomly generated string value.</returns>
            <remarks>
            This method uses the <see cref="T:System.Random"/> class to generate a string consisting of 
            8 characters chosen from uppercase letters, lowercase letters, and digits.
            </remarks>
        </member>
        <member name="T:Ploch.Common.Reflection.AssemblyExtensions">
            <summary>
                Extension utility methods for an <see cref="T:System.Reflection.Assembly" />.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.AssemblyExtensions.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
                Gets the directory name where assembly is located
            </summary>
            <param name="assembly">The assembly</param>
            <returns>The directory name where assembly is located.</returns>
        </member>
        <member name="T:Ploch.Common.Reflection.ObjectGraphHelper">
            <summary>
                Provides helper methods for working with object graphs.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.ObjectGraphHelper.ExecuteOnProperties``1(System.Object,System.Action{``0})">
            <summary>
                Executes the specified action on all properties of the specified type.
            </summary>
            <remarks>
                Recursively executes the specified action on all properties if the property type matches
                <typeparamref name="TPropertyType" />.
            </remarks>
            <param name="root">The root object.</param>
            <param name="action">The action to execute on properties.</param>
            <typeparam name="TPropertyType">The property type.</typeparam>
        </member>
        <member name="M:Ploch.Common.Reflection.ObjectGraphHelper.ExecuteOnProperties(System.Object,System.Action{System.Object})">
            <summary>
                Executes the specified action on all properties.
            </summary>
            <remarks>
                Recursively executes the specified action on all properties.
            </remarks>
            <param name="root">The root object.</param>
            <param name="action">The action to execute on properties.</param>
        </member>
        <member name="T:Ploch.Common.Reflection.ObjectReflectionExtensions">
            <summary>
                Provides extension methods for working with object reflection.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.ObjectReflectionExtensions.GetFieldValue(System.Object,System.String)">
            <summary>
                Gets the value of a field by name including non-public, instance and static members.
            </summary>
            <param name="obj">The object.</param>
            <param name="fieldName">The field name.</param>
            <returns>The field value if found or null.</returns>
        </member>
        <member name="M:Ploch.Common.Reflection.ObjectReflectionExtensions.GetFieldValue``1(System.Object,System.String)">
            <summary>
                Gets the value of a field by name including non-public, instance and static members.
            </summary>
            <param name="obj">The object.</param>
            <param name="fieldName">The field name.</param>
            <typeparam name="TValue">The object type.</typeparam>
            <returns>The field value if found or default.</returns>
        </member>
        <member name="T:Ploch.Common.Reflection.PropertyHelpers">
            <summary>
                Common reflection tasks convenience object extensions.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetProperties``1(System.Object,System.Boolean)">
            <summary>
                Gets the <see langword="public" /> properties of specific type.
            </summary>
            <typeparam name="TPropertyType">
                The type of the properties to return.
            </typeparam>
            <param name="obj">The object.</param>
            <param name="includeSubTypes">
                Include sub types of <typeparamref name="TPropertyType" /> in
                results.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="obj" /> is <see langword="null" />.
            </exception>
            <returns>
                List of <see langword="public" /> properties of specific type.(
                <see cref="T:System.Reflection.PropertyInfo" /> s).
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
                Sets the property.
            </summary>
            <typeparam name="T">The type of a property.</typeparam>
            <param name="obj">The object type.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                More than one property is found with the specified name. See
                Remarks.
            </exception>
            <exception cref="T:System.Reflection.TargetException">
                In the .NET for Windows Store apps or the Portable Class Library,
                <see langword="catch" /> <see cref="T:System.Exception" /> instead. The type
                of <paramref name="obj" /> does not match the target type, or a
                property is an instance property but <paramref name="obj" /> is
                null.
            </exception>
            <exception cref="T:System.MethodAccessException">
                In the .NET for Windows Store apps or the Portable Class Library,
                <see langword="catch" /> the base class exception,
                <see cref="T:System.MemberAccessException" /> , instead. There was an illegal
                attempt to access a <see langword="private" /> or
                <see langword="protected" /> method inside a class.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
                An error occurred while setting the property value. The
                <see cref="P:System.Exception.InnerException" /> property indicates
                the reason for the error.
            </exception>
            <exception cref="T:Ploch.Common.Reflection.PropertyNotFoundException">
                If <paramref name="propertyName" /> property is not found.
            </exception>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetPropertyValue``1(``0,System.String)">
            <summary>
                Gets the property value.
            </summary>
            <typeparam name="T">Object type.</typeparam>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                More than one property is found with the specified name. See
                Remarks.
            </exception>
            <exception cref="T:Ploch.Common.Reflection.PropertyNotFoundException">
                If <paramref name="propertyName" /> property is not found.
            </exception>
            <returns>
                Property value.
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.TryGetStaticPropertyValue(System.Type,System.String,System.Object@)">
            <summary>
                Tries to get the value of a static property from a type.
            </summary>
            <param name="type">The type from which to get the static property value.</param>
            <param name="propertyName">The name of the static property to get.</param>
            <param name="value">The value of the static property, if it exists.</param>
            <returns>True if the static property exists and its value can be retrieved, false otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetStaticPropertyValue(System.Type,System.String)">
            <summary>
                Retrieves the value of a static property of a given type.
            </summary>
            <param name="type">The type that contains the static property.</param>
            <param name="propertyName">The name of the static property.</param>
            <exception cref="T:System.InvalidOperationException">If property was not found in the provided type.</exception>
            <returns> The value of the static property.</returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetStaticPropertyValue``1(System.Type,System.String)">
            <summary>
            Retrieves the value of a static property from the specified type.
            </summary>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="type">The type that contains the static property.</param>
            <param name="propertyName">The name of the static property.</param>
            <returns>
            The value of the static property, if it exists and is of type TValue;
            otherwise, null is returned if the property does not exist,
            or an <see cref="T:System.InvalidOperationException"/> is thrown if the property exists but is not of type TValue.
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.HasProperty(System.Object,System.String)">
            <summary>
                Determines whether the specified property name has property.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                More than one property is found with the specified name. See
                Remarks.
            </exception>
            <returns>
                <c>true</c> if the specified property name has property; otherwise,
                <c>false</c> .
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.PropertyHelpers.GetPropertyInfo(System.Type,System.String,System.Boolean)">
            <summary>
                Gets the property information.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="throwIfNotFound">
                if set to <c>true</c> throws
                <see cref="T:Ploch.Common.Reflection.PropertyNotFoundException" /> if property is not found.
            </param>
            <exception cref="T:Ploch.Common.Reflection.PropertyNotFoundException">
                if <paramref name="throwIfNotFound" /> is <c>true</c> and property
                is not found.
            </exception>
            <returns>
                Property information.
            </returns>
        </member>
        <member name="T:Ploch.Common.Reflection.TypeExtensions">
            <summary>
                <see cref="T:System.Type" /> extension methods.
            </summary>
        </member>
        <member name="M:Ploch.Common.Reflection.TypeExtensions.IsImplementing(System.Type,System.Type)">
            <summary>
                Checks if the type provided is implementing the specified interface.
            </summary>
            <param name="type">The type.</param>
            <param name="interfaceType">The type of interface.</param>
            <returns>
                <c>true</c> if the <paramref name="type" /> is implementing <paramref name="interfaceType" />, false
                otherwise.
            </returns>
        </member>
        <member name="M:Ploch.Common.Reflection.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
                Checks if the type provided is an <see cref="T:System.Collections.IEnumerable" />.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the provided type is <see cref="T:System.Collections.IEnumerable" />, otherwise false.</returns>
        </member>
        <member name="T:Ploch.Common.StopwatchUtil">
            <summary>
                Represents a utility class for measuring the execution time of an action using a <see cref="T:System.Diagnostics.Stopwatch" />.
            </summary>
        </member>
        <member name="M:Ploch.Common.StopwatchUtil.Time(System.Action)">
            <summary>
                Measures the time it takes to execute the specified action.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>The time it took to execute the action.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the action is null.</exception>
            <example>
                <code>
            // Measure the time it takes to execute a method
            TimeSpan executionTime = Time(() =>
            {
            // Code to be executed
            });
            </code>
            </example>
        </member>
        <member name="M:Ploch.Common.StopwatchUtil.Time(System.Threading.Tasks.Task)">
            <summary>
                Measures the time it takes for a task to complete.
            </summary>
            <param name="task">The task to measure the time for.</param>
            <returns>The time elapsed for the task to complete.</returns>
        </member>
        <member name="M:Ploch.Common.StopwatchUtil.Time(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Measures the time it takes to execute the specified asynchronous action.
            </summary>
            <param name="asyncAction">The asynchronous action to measure the time for.</param>
            <returns>The time elapsed for the action to complete.</returns>
        </member>
        <member name="T:Ploch.Common.StringBuilderExtensions">
            <summary>
                Extension methods for <see cref="T:System.Text.StringBuilder" />
            </summary>
        </member>
        <member name="M:Ploch.Common.StringBuilderExtensions.AppendIfNotNull``1(System.Text.StringBuilder,``0,System.Func{``0,System.String})">
            <summary>
                Appends the <paramref name="value" /> to the <paramref name="builder" /> if the <paramref name="value" /> is not
                null.
            </summary>
            <param name="builder">The <c>StringBuilder</c></param>
            <param name="value">The value to append.</param>
            <param name="formatFunc">Optional formatting function.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The source <c>StringBuilder</c>.</returns>
        </member>
        <member name="M:Ploch.Common.StringBuilderExtensions.AppendIfNotNullOrEmpty``1(System.Text.StringBuilder,``0,System.Func{``0,System.String})">
            <summary>
                Appends the <paramref name="value" /> to the <paramref name="builder" /> if the <paramref name="value" /> is not
                null or empty string.
            </summary>
            <param name="builder">The <c>StringBuilder</c></param>
            <param name="value">The value to append.</param>
            <param name="formatFunc">Optional formatting function.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The source <c>StringBuilder</c>.</returns>
        </member>
        <member name="T:Ploch.Common.StringExtensions">
            <summary>
                Extension methods for <see cref="T:System.String" /> and related.
            </summary>
        </member>
        <member name="M:Ploch.Common.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
                Extension method version of <see cref="M:System.String.IsNullOrEmpty(System.String)" />.
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if string is <c>null</c> or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ToBase64String(System.String)">
            <summary>
                Encodes a string as base64 string using <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="str">The string.</param>
            <returns>Encoded version of supplied string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
                Encodes a string as base64 string.
            </summary>
            <param name="str">The string.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>Encoded version of supplied string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.FromBase64String(System.String)">
            <summary>
                Decodes a base64 string using <see cref="P:System.Text.Encoding.UTF8" /> encoding.
            </summary>
            <param name="str">The base64 encoded string.</param>
            <returns>The decoded base64 string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
                Decodes a base64 string using provided encoding.
            </summary>
            <param name="str">The base64 encoded string.</param>
            <param name="encoding">The <paramref name="str" /> encoding.</param>
            <returns>The decoded base64 string.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
                Compare two strings ignoring case.
            </summary>
            <param name="str">The first string to compare.</param>
            <param name="other">The second string to compare.</param>
            <returns><c>true</c> if strings are equal ignoring case, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ReplaceStart(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Replaces the
                <paramref name="oldValue"></paramref>
                with
                <paramref name="newValue"></paramref>
                in the string
                <paramref name="str"></paramref>
                if the string starts with
                <paramref name="oldValue"></paramref>
                .
            </summary>
            <param name="str">The string.</param>
            <param name="oldValue">The old value to replace.</param>
            <param name="newValue">The new value to replace the old value with.</param>
            <param name="stringComparison">
                The string comparison to use when checking if the <paramref name="str" /> starts with
                <paramref name="oldValue" />. If not provided, then <see cref="F:System.StringComparison.InvariantCulture" /> will be used.
            </param>
            <returns>The provided string with a new value at the beginning or the original <paramref name="str" />.</returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ToInt32(System.String)">
            <summary>
                Converts the string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>
                The 32-bit signed integer equivalent to the number contained in the string.
            </returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.TryConvertToInt32(System.String,System.Int32@)">
            <summary>
                Tries to convert the specified string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="result">
                When this method returns, contains the 32-bit signed integer value equivalent to the number
                contained in <paramref name="str" />, if the conversion succeeded; otherwise, zero. This parameter is passed
                uninitialized.
            </param>
            <returns>
                true if the conversion succeeded; otherwise, false.
            </returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.TryConvertToInt32(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
                Tries to convert the specified string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="str" />.</param>
            <param name="result">
                When this method returns, contains the 32-bit signed integer value equivalent to the number
                contained in <paramref name="str" />, if the conversion succeeded; otherwise, zero. This parameter is passed
                uninitialized.
            </param>
            <returns>
                true if the conversion succeeded; otherwise, false.
            </returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.ToInt64(System.String)">
            <summary>
                Converts the string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>
                The 32-bit signed integer equivalent to the number contained in the string.
            </returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.TryConvertToInt64(System.String,System.Int64@)">
            <summary>
                Tries to convert the specified string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="result">
                When this method returns, contains the 32-bit signed integer value equivalent to the number
                contained in <paramref name="str" />, if the conversion succeeded; otherwise, zero. This parameter is passed
                uninitialized.
            </param>
            <returns>
                true if the conversion succeeded; otherwise, false.
            </returns>
        </member>
        <member name="M:Ploch.Common.StringExtensions.TryConvertToInt64(System.String,System.IFormatProvider,System.Int64@)">
            <summary>
                Tries to convert the specified string representation of a number to its 32-bit signed integer equivalent.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="str" />.</param>
            <param name="result">
                When this method returns, contains the 32-bit signed integer value equivalent to the number
                contained in <paramref name="str" />, if the conversion succeeded; otherwise, zero. This parameter is passed
                uninitialized.
            </param>
            <returns>
                true if the conversion succeeded; otherwise, false.
            </returns>
        </member>
        <member name="T:Ploch.Common.ThreadSafeRandom">
            <summary>
                A thread-safe wrapper class for generating random numbers.
            </summary>
        </member>
        <member name="P:Ploch.Common.ThreadSafeRandom.Shared">
            <summary>
                Gets the shared instance of the random number generator.
            </summary>
            <remarks>
                This property provides a thread-safe way to access a shared instance of the <see cref="T:System.Random" /> class.
                The first time this property is accessed from a thread, it creates a new instance of <see cref="T:System.Random" />
                with a seed generated from the global <see cref="T:System.Random" /> instance. Subsequent accesses on the same
                thread will return the same instance, maintaining the same sequence of random numbers.
            </remarks>
            <value>The shared instance of the random number generator.</value>
        </member>
    </members>
</doc>
